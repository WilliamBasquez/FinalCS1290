Palindrome Substrings

1)palindrome_substring(n) = len(n)+palindrome_substring(n[:len(n)-1] + len(n)+palindrome_substring(n[i:j]), until string becomes a single character
 i = start_index, j = end_index, i <= j

2)Since single characters are considered to be valid palindromes, then each letter in a word is a substring of S, and a palindrome, so I took into account the length of a string when counting palindromes.
  I placed i at the beginning of the string, and j at the end, if s[i] == s[j], i move both indexes closer by 1 (i = i+1, j=j-1), if they do not equal, they will alternate ("car", c != r, so i = 1, and j stays the same, until next comparison)
  The reason that both indexes move when letters match, is because I have to make sure that the substring from i to j is a valid palindrome, and by alternating the index increase/decrease, this will give a chance for all letter to be compared
  when i becomes i, we stop looking, because we have compared all letters.